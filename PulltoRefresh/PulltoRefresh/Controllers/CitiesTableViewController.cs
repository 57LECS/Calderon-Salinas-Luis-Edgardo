// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;

namespace PulltoRefresh
{
	public partial class CitiesTableViewController : UITableViewController
	{
        UIRefreshControl refreshControl;
        List<String> keys;
        Dictionary<string, List<string>> cities;

		public CitiesTableViewController (IntPtr handle) : base (handle)
		{
            

		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitializeComponents();
        }


        private void CitiesManager_FetchedCitiesFailed(object sender, EventArgs e)
        {

            InvokeOnMainThread(() =>
            {
                Console.WriteLine("Error");
                UIAlertController alert = UIAlertController.Create("Error", "FATAL ERROR x00671523", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));


                PresentViewController(alert, true, TableView.RefreshControl.EndRefreshing);

            });
            
           
        }

        private void CitiesManager_CitiesFeched(object sender, CitiesEventArgs e)
        {
            cities = e.Cities;
            InvokeOnMainThread( () => refreshControl.EndRefreshing());


            keys = new List<string>(cities.Keys);

            foreach (var key in cities.Keys)
            {
                keys.Add(key);
            }
            keys.AddRange(cities.Keys);

            InvokeOnMainThread(() =>
            {
                TableView.ReloadData();
                TableView.RefreshControl.EndRefreshing();

            });
        }

        private void RefreshControl_ValueChanged(object sender, EventArgs e)
        {

            CitiesManager.SharedInstance.FetchCities();
            //throw new NotImplementedException();
        }

        void InitializeComponents()
        {
            keys = new List<string>();

            foreach (var key in cities.Keys)
            {
                keys.Add(key);
            }
            CitiesManager.SharedInstance.CitiesFeched += CitiesManager_CitiesFeched;
            CitiesManager.SharedInstance.FetchedCitiesFailed += CitiesManager_FetchedCitiesFailed;
            cities = CitiesManager.SharedInstance.GetDafultCities();


            refreshControl = new UIRefreshControl();
            refreshControl.ValueChanged += RefreshControl_ValueChanged;
            TableView.RefreshControl = refreshControl;
        }


        public override nint NumberOfSections(UITableView tableView)
        {
            return cities.Keys.Count;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return cities[keys[int.Parse(section.ToString())]].Count;
        }
        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell("CountryCell", indexPath) as UITableViewCell;
            cell.TextLabel.Text = cities[keys[indexPath.Section]][indexPath.Row];

            return cell;
        }
        public override string TitleForHeader(UITableView tableView, nint section)
        {
            return keys[int.Parse(section.ToString())];
        }

        public override string[] SectionIndexTitles(UITableView tableView)
        {
            return keys.ToArray();

        }

    }
}
